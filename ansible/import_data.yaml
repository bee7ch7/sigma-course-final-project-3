---
- name: Restore MariaDB database from SQL dump on AWS RDS
  hosts: localhost  # Assuming you run Ansible from your local machine

  vars:
    application_env: "{{ lookup('env', 'APPLICATION_ENV') }}"
    application_name: "{{ lookup('env', 'APPLICATION_NAME') }}"
    path_to_dump: "wordpress.sql"
    db_port: "3306"
    db_params:
      - name: "/{{ application_env }}/db-{{ application_name }}/password"
        fact_name: db_password
      - name: "/{{ application_env }}/db-{{ application_name }}/username"
        fact_name: db_username
      - name: "/{{ application_env }}/db-{{ application_name }}/name"
        fact_name: db_name
      - name: "/{{ application_env }}/db-{{ application_name }}/url"
        fact_name: db_url
      - name: "/{{ application_env }}/alb-{{ application_name }}/dns"
        fact_name: alb_dns

  tasks:

    - name: Current env
      debug:
        msg: "{{ application_env }}"

    - name: Current app_name
      debug:
        msg: "{{ application_name }}"

    - name: Get DB params from AWS Parameter store
      set_fact:
        "{{ item.fact_name }}": "{{ lookup('aws_ssm', item.name) }}"
      loop: "{{ db_params }}"
    
    - name: ALB dns name
      debug:
        msg: "{{ alb_dns }}"

    - name: Replace 'localhost' with ALB Name
      ansible.builtin.replace:
        path: "{{ path_to_dump }}"
        regexp: 'localhost'
        replace: "{{ alb_dns }}"
    
    - name: Restore database from SQL dump
      ansible.builtin.shell: >
        mysql -h "{{ db_url }}" -P "{{ db_port }}" -u "{{ db_username }}" -p"{{ db_password }}" "{{ db_name }}" < "{{ path_to_dump }}"
      register: restore_result

    - name: Print restore result
      debug:
        var: restore_result.stderr_lines
      
